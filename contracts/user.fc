;; ----------------------------------------------------------------------------------------
;; User contract for storing metadata about user deposits and for further yield calculation
;; ----------------------------------------------------------------------------------------

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/jetton-wallet-utils.fc";

(int, slice, slice, slice, cell, int, int, int) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), 
        ds~load_msg_addr(), 
        ds~load_msg_addr(),
        ds~load_msg_addr(), 
        ds~load_ref(),
        ds~load_coins(),
        ds~load_coins(),
        ds~load_coins()
    );
}

() save_data(
    int deposit_timestamp,
    slice admin_address,
    slice main_sc_address,
    slice root_master_address,
    cell jetton_wallet_code,
    int usdt_slp_amount,
    int usdt_tlp_amount,
    int total_deposit_amount
) impure inline_ref {
    set_data(
        begin_cell()
        .store_uint(deposit_timestamp, 32)
        .store_slice(admin_address)
        .store_slice(main_sc_address)
        .store_slice(root_master_address)
        .store_ref(jetton_wallet_code)
        .store_coins(usdt_slp_amount)
        .store_coins(usdt_tlp_amount)
        .store_coins(total_deposit_amount)
        .end_cell()
    );
}

() withdraw(
    int query_id,
    slice main_sc_address,
    slice admin_address,
    int deposit_timestamp,
    int total_deposit_amount,
    int usdt_slp_amount,
    int usdt_tlp_amount
) impure inline {
    cell msg_body = begin_cell()
                    .store_uint(op::withdraw_internal, 32)
                    .store_uint(query_id, 64)
                    .store_slice(admin_address)
                    .store_uint(deposit_timestamp, 32)
                    .store_coins(total_deposit_amount)
                    .store_coins(usdt_slp_amount)
                    .store_coins(usdt_tlp_amount)
                    .end_cell();
    cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(main_sc_address)
                .store_coins(20000000) ;; 0.02 tons
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1) 
                .store_ref(msg_body)
                .end_cell();
    send_raw_message(msg, SEND_MODE_REGULAR);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore bounced messages
        return ();
    }
    if (in_msg_body.slice_bits() < 32) {
        ;; ignore simple transfers
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (
        int deposit_timestamp,
        slice admin_address,
        slice main_sc_address,
        slice root_master_address,
        cell jetton_wallet_code,
        int usdt_slp_amount,
        int usdt_tlp_amount,
        int total_deposit_amount
    ) = load_data();

    if (op == op::deposit) {
        throw_unless(err::not_parent, equal_slices(sender_address, main_sc_address));

        int new_deposit_timestamp = in_msg_body~load_uint(32);
        int new_total_deposit_amount = in_msg_body~load_coins();
        int new_usdt_slp_amount = in_msg_body~load_coins();
        int new_usdt_tlp_amount = in_msg_body~load_coins();
        in_msg_body.end_parse();

        if (deposit_timestamp == 0) {
            deposit_timestamp = new_deposit_timestamp;
        }

        save_data(
            deposit_timestamp,
            admin_address,
            main_sc_address,
            root_master_address,
            jetton_wallet_code,
            new_usdt_slp_amount + usdt_slp_amount,
            new_usdt_tlp_amount + usdt_tlp_amount,
            total_deposit_amount + new_total_deposit_amount
        );
        return();
    }
    if (op == op::transfer_notification) {
        cell state_init = calculate_jetton_wallet_state_init(my_address(), root_master_address, jetton_wallet_code);
        slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
        throw_unless(err::unknown_token, equal_slices(sender_address, jetton_wallet_address));

        (int jetton_amount, slice owner_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        throw_unless(err::not_admin, equal_slices(owner_address, admin_address));

        cell state_init = calculate_jetton_wallet_state_init(my_address(), root_master_address, jetton_wallet_code);
        slice my_jetton_wallet_address = calculate_jetton_wallet_address(state_init);
        burn_jettons(jetton_amount, my_jetton_wallet_address, query_id, 300000000); ;; 0.3 tons

        ;; divide by 10 cause ROOT have 9 decimals & ROOT ~ 100 USDT
        int withdraw_amount = jetton_amount / 10;
        withdraw(query_id, main_sc_address, admin_address, deposit_timestamp, withdraw_amount, usdt_slp_amount, usdt_tlp_amount);

        total_deposit_amount -= withdraw_amount;
        if (total_deposit_amount == 0) {
            save_data(0, admin_address, main_sc_address, root_master_address, jetton_wallet_code, 0, 0, 0);
        } else {
            save_data(
                deposit_timestamp,
                admin_address,
                main_sc_address,
                root_master_address,
                jetton_wallet_code,
                usdt_slp_amount,
                usdt_tlp_amount,
                total_deposit_amount
            );
        }
        return();
    }
    throw(err::unknown_op_code);
}

(int, slice, slice, slice, cell, int, int, int) get_user_data() method_id {
    return load_data();
}