;; ----------------------------------------------------------------------------------------
;; User contract for storing metadata about user deposits and for further yield calculation
;; ----------------------------------------------------------------------------------------

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/jetton-wallet-utils.fc";

global slice admin_address;
global slice main_sc_address;
global slice root_master_address;
global cell jetton_wallet_code;
global int usdt_slp_amount;
global int usdt_tlp_amount;
global int total_deposit_amount;

() load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
    admin_address = ds~load_msg_addr(); 
    main_sc_address = ds~load_msg_addr();
    root_master_address = ds~load_msg_addr(); 
    jetton_wallet_code = ds~load_ref();
    usdt_slp_amount = ds~load_coins();
    usdt_tlp_amount = ds~load_coins();
    total_deposit_amount = ds~load_coins();
    ds.end_parse();
}

() save_data() impure inline_ref {
    set_data(
        begin_cell()
        .store_slice(admin_address)
        .store_slice(main_sc_address)
        .store_slice(root_master_address)
        .store_ref(jetton_wallet_code)
        .store_coins(usdt_slp_amount)
        .store_coins(usdt_tlp_amount)
        .store_coins(total_deposit_amount)
        .end_cell()
    );
}

() withdraw_internal(int query_id) impure inline {
    cell msg_body = begin_cell()
                    .store_uint(op::withdraw_internal, 32)
                    .store_uint(query_id, 64)
                    .store_slice(admin_address)
                    .store_coins(total_deposit_amount)
                    .store_coins(usdt_slp_amount)
                    .store_coins(usdt_tlp_amount)
                    .end_cell();
    cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(main_sc_address)
                .store_coins(20000000) ;; 0.02 tons
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1) 
                .store_ref(msg_body)
                .end_cell();
    send_raw_message(msg, SEND_MODE_REGULAR);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore bounced messages
        return ();
    }
    if (in_msg_body.slice_bits() < 32) {
        ;; ignore simple transfers
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
    load_data();
    if (op == op::deposit) {
        throw_unless(err::not_parent, equal_slices(sender_address, main_sc_address));
        ;; parse msg body
        int new_total_deposit_amount = in_msg_body~load_coins();
        int new_usdt_slp_amount = in_msg_body~load_coins();
        int new_usdt_tlp_amount = in_msg_body~load_coins();
        in_msg_body.end_parse();
        ;; update storage
        usdt_slp_amount += new_usdt_slp_amount;
        usdt_tlp_amount += new_usdt_tlp_amount;
        total_deposit_amount += new_total_deposit_amount;
        save_data();
        return();
    }
    if (op == op::transfer_notification) {
        slice jetton_wallet_address = get_jetton_wallet_address(my_address(), root_master_address, jetton_wallet_code);
        throw_unless(err::unknown_jetton, equal_slices(sender_address, jetton_wallet_address));
        ;; parse msg body
        (int jetton_amount, slice owner_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        ;; if not admin throw error
        throw_unless(err::not_admin, equal_slices(owner_address, admin_address));
        ;; burn received beetroot
        burn_jettons(jetton_amount, jetton_wallet_address, query_id, 300000000, admin_address); ;; 0.3 tons
        ;; send msg to withdraw funds
        withdraw_internal(query_id);
        return();
    }
    throw(err::unknown_op_code);
}

(slice, slice, slice, cell, int, int, int) get_user_data() method_id {
    load_data();
    return (
        admin_address,
        main_sc_address,
        root_master_address,
        jetton_wallet_code,
        usdt_slp_amount,
        usdt_tlp_amount,
        total_deposit_amount
    );
}