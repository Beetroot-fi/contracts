;; ----------------------------------------------------------------------------------------------------------------------------
;; The main entrypoint sc who send usdt to protocols, control root price, mint user sc's, mint beetroot for users & send yields
;; ----------------------------------------------------------------------------------------------------------------------------

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/jetton-utils.fc";
#include "imports/utils.fc";
#include "imports/jetton-wallet-common-utils.fc";

(slice, slice, cell, slice, cell, cell, int) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_ref(),
        ds~load_msg_addr(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_uint(64)
    );
}

() save_data(
    slice usdt_jetton_master_address,
    slice root_master_address,
    cell user_sc_code,
    slice admin_address,
    cell jetton_wallet_governed_code,
    cell jetton_wallet_code,
    int root_price
) impure inline {
    set_data(
        begin_cell()
        .store_slice(usdt_jetton_master_address)
        .store_slice(root_master_address)
        .store_ref(user_sc_code)
        .store_slice(admin_address)
        .store_ref(jetton_wallet_governed_code)
        .store_ref(jetton_wallet_code)
        .store_uint(root_price, 64)
        .end_cell()
    );
}

() mint_tokens(int query_id, int balance, slice owner_address, slice root_master_address) impure inline {
    cell internal_transfer_body = begin_cell()
                                .store_uint(op::internal_transfer, 32)
                                .store_uint(query_id, 64)
                                .store_coins(balance)
                                .store_slice(my_address())
                                .store_slice(owner_address)
                                .store_coins(1000000) ;; 0.001 tons
                                .store_uint(0, 1)
                                .end_cell();
    slice mint_token_body = begin_cell()
                            .store_uint(op::mint_token, 32)
                            .store_uint(query_id, 64)
                            .store_slice(owner_address)
                            .store_coins(20000000) ;; 0.02 tons
                            .store_ref(internal_transfer_body)
                            .end_cell()
                            .begin_parse();
    cell mint_token_msg = begin_cell()
                        .store_uint(0x18, 6) 
                        .store_slice(root_master_address)
                        .store_coins(30000000) ;; 0.03 tons
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) 
                        .store_slice(mint_token_body)
                        .end_cell();
    send_raw_message(mint_token_msg, SEND_MODE_REGULAR);
}

() mint_user_sc(
    int query_id,
    int total_deposit_amount,
    int usdt_slp_amount,
    int usdt_tlp_amount,
    cell user_sc_code,
    slice owner_address,
    slice root_master_address,
    cell jetton_wallet_code
) impure inline {
    cell state_init = calculate_user_sc_state_init(user_sc_code, owner_address, my_address(), root_master_address, jetton_wallet_code);
    slice to_address = calculate_sc_address(state_init);
    cell msg_body = begin_cell()
                    .store_uint(op::deposit, 32)
                    .store_uint(query_id, 64)
                    .store_uint(now(), 32) ;; deposit_timestamp
                    .store_coins(total_deposit_amount)
                    .store_coins(usdt_slp_amount)
                    .store_coins(usdt_tlp_amount)
                    .end_cell();
    cell mint_user_sc_msg = begin_cell()
                            .store_uint(0x10, 6)
                            .store_slice(to_address) 
                            .store_coins(30000000) ;; 0.03 tons
                            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                            .store_ref(state_init)
                            .store_ref(msg_body)
                            .end_cell();
    send_raw_message(mint_user_sc_msg, SEND_MODE_REGULAR);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore bounced messages
        return ();
    }
    if (in_msg_body.slice_bits() < 32) {
        ;; ignore simple transfers
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
    (
        slice usdt_jetton_master_address,
        slice root_master_address,
        cell user_sc_code,
        slice admin_address,
        cell jetton_wallet_governed_code,
        cell jetton_wallet_code,
        int root_price
    ) = load_data();

    if (op == op::transfer_notification) {   
        cell usdt_jetton_wallet_state_init = calculate_jetton_wallet_governed_state_init(my_address(), usdt_jetton_master_address, jetton_wallet_governed_code);
        slice usdt_jetton_wallet_address = calculate_jetton_wallet_governed_address(usdt_jetton_wallet_state_init);
        throw_unless(err::unknown_token, equal_slices(sender_address, usdt_jetton_wallet_address));

        (int jetton_amount, slice owner_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());

        if (is_address_none(owner_address)) {
            ;; ignore emptry addresses
            return ();
        }

        mint_user_sc(query_id, jetton_amount, 0, 0, user_sc_code, owner_address, root_master_address, jetton_wallet_code);

        ;; divide by 100 cause 1 ROOT ~ 100 USDT, mult by 1000 cause usdt have 6 decimals
        mint_tokens(query_id, (jetton_amount / root_price) * 1000, owner_address, root_master_address);

        ;; comission
        send_jettons(1000000, admin_address, query_id, usdt_jetton_wallet_address, begin_cell().end_cell(), 1000000, 50000000);
        return ();
    }
    if (op == op::withdraw_internal) {
        slice admin_address = in_msg_body~load_msg_addr();
        int deposit_timestamp = in_msg_body~load_uint(32);
        int total_deposit_amount = in_msg_body~load_coins();
        int usdt_slp_amount = in_msg_body~load_coins();
        int usdt_tlp_amount = in_msg_body~load_coins();
        in_msg_body.end_parse();

        cell state_init = calculate_user_sc_state_init(user_sc_code, admin_address, my_address(), root_master_address, jetton_wallet_code);
        slice user_sc_address = calculate_sc_address(state_init);
        throw_unless(err::not_child, equal_slices(sender_address, user_sc_address));

        cell state_init = calculate_jetton_wallet_governed_state_init(my_address(), usdt_jetton_master_address, jetton_wallet_governed_code);
        slice usdt_jetton_wallet_address = calculate_jetton_wallet_governed_address(state_init);

        ;; calculating yield at apy of 15%
        int yield = (root_price * 15 * (now() - deposit_timestamp) * 10000) / 31536000;
        send_jettons(
            total_deposit_amount + yield,
            admin_address,
            query_id,
            usdt_jetton_wallet_address,
            begin_cell().end_cell(),
            1000000, ;; 0.001 tons
            50000000 ;; 0.05 tons       
        );
        return();
    }
    if (op == op::upgrade_contract) {
        throw_unless(err::not_admin, equal_slices(sender_address, admin_address));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        in_msg_body.end_parse();
        set_data(new_data);
        set_code(new_code);
        return ();
    }
    if (op == op::update_root_price) {
        throw_unless(err::not_admin, equal_slices(sender_address, admin_address));
        int new_root_price = in_msg_body~load_uint(64);
        in_msg_body.end_parse();
        save_data(
            usdt_jetton_master_address,
            root_master_address,
            user_sc_code,admin_address,
            jetton_wallet_governed_code,
            jetton_wallet_code,
            new_root_price
        );
        return ();
    }
    throw(err::unknown_op_code);
}

(slice, slice, cell, slice, cell, cell, int) get_main_data() method_id {
    return load_data();
}

slice get_user_sc_address(slice admin_address) method_id {
    (_, slice root_master_address, cell user_sc_code, _, _, cell jetton_wallet_code, _) = load_data();
    cell state_init = calculate_user_sc_state_init(user_sc_code, admin_address, my_address(), root_master_address, jetton_wallet_code);
    return calculate_sc_address(state_init);
}