#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/jetton-utils.fc";
#include "imports/utils.fc";

(slice, cell, slice, cell, slice) load_data() inline {
    ;; in storage:
    ;; - usdt jetton master address
    ;; - usdt jetton wallet code
    ;; - root jetton master address
    ;; - user sc code
    ;; - admin address
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_ref(), ds~load_msg_addr(), ds~load_ref(), ds~load_msg_addr());
}

() mint_tokens(int query_id, int balance, slice sender_address, slice root_master_address) inline {
    ;; default tokens mint msg ref: https://github.com/ton-blockchain/token-contract/blob/21e7844fa6dbed34e0f4c70eb5f0824409640a30/ft/jetton-minter.fc#L59    
    cell internal_transfer_body = begin_cell()
                                .store_uint(op::internal_transfer, 32)
                                .store_uint(query_id, 64)
                                .store_coins(balance)
                                .store_slice(my_address())
                                .store_slice(sender_address)
                                .store_coins(1000000) ;; 0.001 tons
                                .store_uint(0, 1)
                                .end_cell();
    slice mint_token_body = begin_cell()
                            .store_uint(op::mint, 32)
                            .store_uint(query_id, 64)
                            .store_slice(sender_address)
                            .store_coins(20000000) ;; 0.02 tons
                            .store_ref(internal_transfer_body)
                            .end_cell()
                            .begin_parse();
    cell mint_token_msg = begin_cell()
                        .store_uint(0x18, 6) 
                        .store_slice(root_master_address)
                        .store_coins(20000000) ;; 0.02 tons
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) 
                        .store_slice(mint_token_body)
                        .end_cell();
    send_raw_message(mint_token_msg, SEND_MODE_REGULAR);
}

() mint_user_sc(slice in_msg_body, cell user_sc_code) inline {
    int balance = in_msg_body~load_coins();
    slice admin_address = in_msg_body~load_msg_addr();
    cell state_init = calculate_user_sc_state_init(user_sc_code, now(), 0, balance, admin_address, my_address());
    slice to_address = calculate_sc_address(state_init);
    cell mint_user_sc_msg = begin_cell()
                            .store_uint(0x10, 6)
                            .store_slice(to_address) 
                            .store_coins(30000000) ;; 0.03 tons
                            .store_uint(4 + 2, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                            .store_ref(state_init)
                            .end_cell();
    send_raw_message(mint_user_sc_msg, SEND_MODE_REGULAR);
}

() send_profit(slice admin_address) {
    cell msg = begin_cell()
                .store_uint(0x10, 6) 
                .store_slice(admin_address)
                .store_coins(100000000) ;; 0.1 ton
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_slice(begin_cell().end_cell().begin_parse())
                .end_cell();
    send_raw_message(msg, SEND_MODE_REGULAR); 
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    ;; ignore bounced messages
    ;; if (flags & 1) {
    ;;     return ();
    ;; }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice usdt_jetton_master_address, cell usdt_jetton_wallet_code, slice root_master_address, cell user_sc_code, slice admin_address) = load_data();
    if (op == op::transfer_notification) {   
        cell state_init = calculate_jetton_wallet_state_init(my_address(), usdt_jetton_master_address, usdt_jetton_wallet_code);
        slice jetton_wallet_address = calculate_sc_address(state_init);
        throw_unless(err::not_owner, equal_slices(sender_address, jetton_wallet_address));
        ;; first step
        mint_user_sc(in_msg_body, user_sc_code);
        ;; second step
        mint_tokens(query_id, in_msg_body~load_coins(), sender_address, root_master_address);
        ;; third step
        send_profit(admin_address);
        return ();
    }
    ;; if wrong op code
    throw(err::unknown_op_code);
}